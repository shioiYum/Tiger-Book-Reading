64 shift/reduce conflicts

error:  state 23: shift/reduce conflict (shift LBRACK, reduce by rule 68)
error:  state 39: shift/reduce conflict (shift TYPE, reduce by rule 50)
error:  state 40: shift/reduce conflict (shift FUNCTION, reduce by rule 52)
error:  state 98: shift/reduce conflict (shift OR, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift AND, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift GE, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift GT, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift LE, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift LT, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift NEQ, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift EQ, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift DIVIDE, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift TIMES, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift MINUS, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift PLUS, reduce by rule 14)
error:  state 99: shift/reduce conflict (shift ELSE, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift OR, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift AND, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift GE, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift GT, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift LE, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift LT, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift NEQ, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift EQ, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift DIVIDE, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift TIMES, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift MINUS, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift PLUS, reduce by rule 46)
error:  state 126: shift/reduce conflict (shift OR, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift AND, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift GE, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift GT, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift LE, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift LT, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift NEQ, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift EQ, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift DIVIDE, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift TIMES, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift MINUS, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift PLUS, reduce by rule 45)
error:  state 128: shift/reduce conflict (shift OR, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift AND, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift GE, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift GT, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift LE, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift LT, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift NEQ, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift EQ, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift DIVIDE, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift TIMES, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift MINUS, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift PLUS, reduce by rule 43)
error:  state 140: shift/reduce conflict (shift OR, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift AND, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift GE, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift GT, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift LE, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift LT, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift NEQ, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift EQ, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift DIVIDE, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift TIMES, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift MINUS, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift PLUS, reduce by rule 15)

state 0:

	program : . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 12
	program	goto 144
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 1:

	exp : unitexp .  (reduce by rule 2)



	.	reduce by rule 2


state 2:

	exp : letexp .  (reduce by rule 19)



	.	reduce by rule 19


state 3:

	exp : ifthen .  (reduce by rule 13)



	.	reduce by rule 13


state 4:

	exp : assign .  (reduce by rule 12)



	.	reduce by rule 12


state 5:

	exp : arraycreate .  (reduce by rule 11)



	.	reduce by rule 11


state 6:

	exp : recordcreate .  (reduce by rule 10)



	.	reduce by rule 10


state 7:

	exp : comrcomp .  (reduce by rule 8)



	.	reduce by rule 8


state 8:

	exp : logicops .  (reduce by rule 9)



	.	reduce by rule 9


state 9:

	exp : arthcomp .  (reduce by rule 7)



	.	reduce by rule 7


state 10:

	exp : funcall .  (reduce by rule 6)



	.	reduce by rule 6


state 11:

	exp : lvalue .  (reduce by rule 1)
	lvalue : lvalue . LBRACK exp RBRACK 
	lvalue : lvalue . DOT ID 
	assign : lvalue . ASSIGN exp 

	LBRACK	shift 26
	DOT	shift 25
	ASSIGN	shift 24


	.	reduce by rule 1


state 12:

	program : exp .  (reduce by rule 0)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 0


state 13:

	exp : NIL .  (reduce by rule 18)



	.	reduce by rule 18


state 14:

	exp : BREAK .  (reduce by rule 17)



	.	reduce by rule 17


state 15:

	letexp : LET . decs IN expseqs END 

	FUNCTION	shift 48
	VAR	shift 47
	TYPE	shift 46

	decs	goto 45
	dec	goto 44
	tydec	goto 43
	vardec	goto 42
	fundec	goto 41
	fundeclist	goto 40
	typedeclist	goto 39

	.	reduce by rule 49


state 16:

	exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 49


	.	error


state 17:

	exp : WHILE . exp DO exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 50
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 18:

	ifthen : IF . exp THEN exp ELSE exp 
	ifthen : IF . exp THEN exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 51
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 19:

	exp : MINUS . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 52
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 20:

	exp : LPAREN . expseqs RPAREN 
	unitexp : LPAREN . RPAREN 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	RPAREN	shift 55
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 54
	lvalue	goto 11
	expseqs	goto 53
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 21:

	exp : STRING .  (reduce by rule 4)



	.	reduce by rule 4


state 22:

	exp : INT .  (reduce by rule 3)



	.	reduce by rule 3

error:  state 23: shift/reduce conflict (shift LBRACK, reduce by rule 68)

state 23:

	lvalue : ID .  (reduce by rule 68)
	lvalue : ID . LBRACK exp RBRACK 
	funcall : ID . LPAREN args RPAREN 
	recordcreate : ID . LBRACE recassign RBRACE 
	arraycreate : ID . LBRACK exp RBRACK OF exp 

	LPAREN	shift 58
	LBRACK	shift 57
	LBRACE	shift 56


	.	reduce by rule 68


state 24:

	assign : lvalue ASSIGN . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 59
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 25:

	lvalue : lvalue DOT . ID 

	ID	shift 60


	.	error


state 26:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 61
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 27:

	logicops : exp OR . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 62
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 28:

	logicops : exp AND . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 63
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 29:

	comrcomp : exp GE . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 64
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 30:

	comrcomp : exp GT . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 65
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 31:

	comrcomp : exp LE . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 66
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 32:

	comrcomp : exp LT . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 67
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 33:

	comrcomp : exp NEQ . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 68
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 34:

	comrcomp : exp EQ . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 69
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 35:

	arthcomp : exp DIVIDE . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 70
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 36:

	arthcomp : exp TIMES . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 71
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 37:

	arthcomp : exp MINUS . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 72
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 38:

	arthcomp : exp PLUS . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 73
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error

error:  state 39: shift/reduce conflict (shift TYPE, reduce by rule 50)

state 39:

	dec : typedeclist .  (reduce by rule 50)
	typedeclist : typedeclist . tydec 

	TYPE	shift 46

	tydec	goto 74

	.	reduce by rule 50

error:  state 40: shift/reduce conflict (shift FUNCTION, reduce by rule 52)

state 40:

	dec : fundeclist .  (reduce by rule 52)
	fundeclist : fundeclist . fundec 

	FUNCTION	shift 48

	fundec	goto 75

	.	reduce by rule 52


state 41:

	fundeclist : fundec .  (reduce by rule 55)



	.	reduce by rule 55


state 42:

	dec : vardec .  (reduce by rule 51)



	.	reduce by rule 51


state 43:

	typedeclist : tydec .  (reduce by rule 53)



	.	reduce by rule 53


state 44:

	decs : dec . decs 

	FUNCTION	shift 48
	VAR	shift 47
	TYPE	shift 46

	decs	goto 76
	dec	goto 44
	tydec	goto 43
	vardec	goto 42
	fundec	goto 41
	fundeclist	goto 40
	typedeclist	goto 39

	.	reduce by rule 49


state 45:

	letexp : LET decs . IN expseqs END 

	IN	shift 77


	.	error


state 46:

	tydec : TYPE . ID EQ ty 

	ID	shift 78


	.	error


state 47:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 79


	.	error


state 48:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 80


	.	error


state 49:

	exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 81


	.	error


state 50:

	exp : WHILE exp . DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27
	DO	shift 82


	.	error


state 51:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp . THEN exp ELSE exp 
	ifthen : IF exp . THEN exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27
	THEN	shift 83


	.	error


state 52:

	exp : MINUS exp .  (reduce by rule 5)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 5


state 53:

	exp : LPAREN expseqs . RPAREN 
	expseqs : expseqs . SEMICOLON exp 

	SEMICOLON	shift 85
	RPAREN	shift 84


	.	error


state 54:

	expseqs : exp .  (reduce by rule 20)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 20


state 55:

	unitexp : LPAREN RPAREN .  (reduce by rule 72)



	.	reduce by rule 72


state 56:

	recordcreate : ID LBRACE . recassign RBRACE 


	recassign	goto 86

	.	reduce by rule 40


state 57:

	lvalue : ID LBRACK . exp RBRACK 
	arraycreate : ID LBRACK . exp RBRACK OF exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 87
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 58:

	funcall : ID LPAREN . args RPAREN 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 90
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	args	goto 89
	non_empty_args	goto 88
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	reduce by rule 24


state 59:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	assign : lvalue ASSIGN exp .  (reduce by rule 44)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 44


state 60:

	lvalue : lvalue DOT ID .  (reduce by rule 71)



	.	reduce by rule 71


state 61:

	lvalue : lvalue LBRACK exp . RBRACK 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	RBRACK	shift 91
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	error


state 62:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	logicops : exp OR exp .  (reduce by rule 32)
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29


	.	reduce by rule 32


state 63:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp AND exp .  (reduce by rule 31)
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29


	.	reduce by rule 31


state 64:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	comrcomp : exp GE exp .  (reduce by rule 38)

	EOF	reduce by rule 38
	ID	reduce by rule 38
	COMMA	reduce by rule 38
	SEMICOLON	reduce by rule 38
	RPAREN	reduce by rule 38
	RBRACK	reduce by rule 38
	RBRACE	reduce by rule 38
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	AND	reduce by rule 38
	OR	reduce by rule 38
	THEN	reduce by rule 38
	ELSE	reduce by rule 38
	TO	reduce by rule 38
	DO	reduce by rule 38
	IN	reduce by rule 38
	END	reduce by rule 38
	FUNCTION	reduce by rule 38
	VAR	reduce by rule 38
	TYPE	reduce by rule 38


	.	error


state 65:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp GT exp .  (reduce by rule 37)
	comrcomp : exp . GE exp 

	EOF	reduce by rule 37
	ID	reduce by rule 37
	COMMA	reduce by rule 37
	SEMICOLON	reduce by rule 37
	RPAREN	reduce by rule 37
	RBRACK	reduce by rule 37
	RBRACE	reduce by rule 37
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	AND	reduce by rule 37
	OR	reduce by rule 37
	THEN	reduce by rule 37
	ELSE	reduce by rule 37
	TO	reduce by rule 37
	DO	reduce by rule 37
	IN	reduce by rule 37
	END	reduce by rule 37
	FUNCTION	reduce by rule 37
	VAR	reduce by rule 37
	TYPE	reduce by rule 37


	.	error


state 66:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp LE exp .  (reduce by rule 36)
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 36
	ID	reduce by rule 36
	COMMA	reduce by rule 36
	SEMICOLON	reduce by rule 36
	RPAREN	reduce by rule 36
	RBRACK	reduce by rule 36
	RBRACE	reduce by rule 36
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	AND	reduce by rule 36
	OR	reduce by rule 36
	THEN	reduce by rule 36
	ELSE	reduce by rule 36
	TO	reduce by rule 36
	DO	reduce by rule 36
	IN	reduce by rule 36
	END	reduce by rule 36
	FUNCTION	reduce by rule 36
	VAR	reduce by rule 36
	TYPE	reduce by rule 36


	.	error


state 67:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp LT exp .  (reduce by rule 35)
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 35
	ID	reduce by rule 35
	COMMA	reduce by rule 35
	SEMICOLON	reduce by rule 35
	RPAREN	reduce by rule 35
	RBRACK	reduce by rule 35
	RBRACE	reduce by rule 35
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	AND	reduce by rule 35
	OR	reduce by rule 35
	THEN	reduce by rule 35
	ELSE	reduce by rule 35
	TO	reduce by rule 35
	DO	reduce by rule 35
	IN	reduce by rule 35
	END	reduce by rule 35
	FUNCTION	reduce by rule 35
	VAR	reduce by rule 35
	TYPE	reduce by rule 35


	.	error


state 68:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp NEQ exp .  (reduce by rule 34)
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 34
	ID	reduce by rule 34
	COMMA	reduce by rule 34
	SEMICOLON	reduce by rule 34
	RPAREN	reduce by rule 34
	RBRACK	reduce by rule 34
	RBRACE	reduce by rule 34
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	AND	reduce by rule 34
	OR	reduce by rule 34
	THEN	reduce by rule 34
	ELSE	reduce by rule 34
	TO	reduce by rule 34
	DO	reduce by rule 34
	IN	reduce by rule 34
	END	reduce by rule 34
	FUNCTION	reduce by rule 34
	VAR	reduce by rule 34
	TYPE	reduce by rule 34


	.	error


state 69:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp EQ exp .  (reduce by rule 33)
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 33
	ID	reduce by rule 33
	COMMA	reduce by rule 33
	SEMICOLON	reduce by rule 33
	RPAREN	reduce by rule 33
	RBRACK	reduce by rule 33
	RBRACE	reduce by rule 33
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	AND	reduce by rule 33
	OR	reduce by rule 33
	THEN	reduce by rule 33
	ELSE	reduce by rule 33
	TO	reduce by rule 33
	DO	reduce by rule 33
	IN	reduce by rule 33
	END	reduce by rule 33
	FUNCTION	reduce by rule 33
	VAR	reduce by rule 33
	TYPE	reduce by rule 33


	.	error


state 70:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	arthcomp : exp DIVIDE exp .  (reduce by rule 30)
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 30


state 71:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp TIMES exp .  (reduce by rule 29)
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 29


state 72:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp MINUS exp .  (reduce by rule 28)
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	TIMES	shift 36
	DIVIDE	shift 35


	.	reduce by rule 28


state 73:

	arthcomp : exp . PLUS exp 
	arthcomp : exp PLUS exp .  (reduce by rule 27)
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	TIMES	shift 36
	DIVIDE	shift 35


	.	reduce by rule 27


state 74:

	typedeclist : typedeclist tydec .  (reduce by rule 54)



	.	reduce by rule 54


state 75:

	fundeclist : fundeclist fundec .  (reduce by rule 56)



	.	reduce by rule 56


state 76:

	decs : dec decs .  (reduce by rule 48)



	.	reduce by rule 48


state 77:

	letexp : LET decs IN . expseqs END 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 54
	lvalue	goto 11
	expseqs	goto 92
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 78:

	tydec : TYPE ID . EQ ty 

	EQ	shift 93


	.	error


state 79:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 95
	ASSIGN	shift 94


	.	error


state 80:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 96


	.	error


state 81:

	exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 97
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 82:

	exp : WHILE exp DO . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 98
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 83:

	ifthen : IF exp THEN . exp ELSE exp 
	ifthen : IF exp THEN . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 99
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 84:

	exp : LPAREN expseqs RPAREN .  (reduce by rule 16)



	.	reduce by rule 16


state 85:

	expseqs : expseqs SEMICOLON . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 100
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 86:

	recordcreate : ID LBRACE recassign . RBRACE 
	recassign : recassign . ID EQ exp 
	recassign : recassign . ID EQ exp COMMA 

	ID	shift 102
	RBRACE	shift 101


	.	error


state 87:

	lvalue : ID LBRACK exp . RBRACK 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	arraycreate : ID LBRACK exp . RBRACK OF exp 

	RBRACK	shift 103
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	error


state 88:

	args : non_empty_args .  (reduce by rule 23)



	.	reduce by rule 23


state 89:

	funcall : ID LPAREN args . RPAREN 
	non_empty_args : args . COMMA exp 

	COMMA	shift 105
	RPAREN	shift 104


	.	error


state 90:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	non_empty_args : exp .  (reduce by rule 25)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 25


state 91:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 69)



	.	reduce by rule 69


state 92:

	expseqs : expseqs . SEMICOLON exp 
	letexp : LET decs IN expseqs . END 

	SEMICOLON	shift 85
	END	shift 106


	.	error


state 93:

	tydec : TYPE ID EQ . ty 

	ID	shift 110
	LBRACE	shift 109
	ARRAY	shift 108

	ty	goto 107

	.	error


state 94:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 111
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 95:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 112


	.	error


state 96:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 114

	tyfields	goto 113

	.	reduce by rule 61


state 97:

	exp : FOR ID ASSIGN exp . TO exp DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27
	TO	shift 115


	.	error

error:  state 98: shift/reduce conflict (shift OR, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift AND, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift GE, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift GT, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift LE, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift LT, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift NEQ, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift EQ, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift DIVIDE, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift TIMES, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift MINUS, reduce by rule 14)
error:  state 98: shift/reduce conflict (shift PLUS, reduce by rule 14)

state 98:

	exp : WHILE exp DO exp .  (reduce by rule 14)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 14

error:  state 99: shift/reduce conflict (shift ELSE, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift OR, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift AND, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift GE, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift GT, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift LE, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift LT, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift NEQ, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift EQ, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift DIVIDE, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift TIMES, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift MINUS, reduce by rule 46)
error:  state 99: shift/reduce conflict (shift PLUS, reduce by rule 46)

state 99:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp THEN exp . ELSE exp 
	ifthen : IF exp THEN exp .  (reduce by rule 46)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27
	ELSE	shift 116


	.	reduce by rule 46


state 100:

	expseqs : expseqs SEMICOLON exp .  (reduce by rule 21)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 21


state 101:

	recordcreate : ID LBRACE recassign RBRACE .  (reduce by rule 39)



	.	reduce by rule 39


state 102:

	recassign : recassign ID . EQ exp 
	recassign : recassign ID . EQ exp COMMA 

	EQ	shift 117


	.	error


state 103:

	lvalue : ID LBRACK exp RBRACK .  (reduce by rule 70)
	arraycreate : ID LBRACK exp RBRACK . OF exp 

	OF	shift 118


	.	reduce by rule 70


state 104:

	funcall : ID LPAREN args RPAREN .  (reduce by rule 22)



	.	reduce by rule 22


state 105:

	non_empty_args : args COMMA . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 119
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 106:

	letexp : LET decs IN expseqs END .  (reduce by rule 47)



	.	reduce by rule 47


state 107:

	tydec : TYPE ID EQ ty .  (reduce by rule 57)



	.	reduce by rule 57


state 108:

	ty : ARRAY . OF ID 

	OF	shift 120


	.	error


state 109:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 114

	tyfields	goto 121

	.	reduce by rule 61


state 110:

	ty : ID .  (reduce by rule 58)



	.	reduce by rule 58


state 111:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	vardec : VAR ID ASSIGN exp .  (reduce by rule 64)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 64


state 112:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 122


	.	error


state 113:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 123


	.	error


state 114:

	tyfields : ID . COLON ID 
	tyfields : ID . COLON ID COMMA tyfields 

	COLON	shift 124


	.	error


state 115:

	exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 125
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 116:

	ifthen : IF exp THEN exp ELSE . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 126
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 117:

	recassign : recassign ID EQ . exp 
	recassign : recassign ID EQ . exp COMMA 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 127
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 118:

	arraycreate : ID LBRACK exp RBRACK OF . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 128
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 119:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	non_empty_args : args COMMA exp .  (reduce by rule 26)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 26


state 120:

	ty : ARRAY OF . ID 

	ID	shift 129


	.	error


state 121:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 130


	.	error


state 122:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 131
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 123:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 133
	EQ	shift 132


	.	error


state 124:

	tyfields : ID COLON . ID 
	tyfields : ID COLON . ID COMMA tyfields 

	ID	shift 134


	.	error


state 125:

	exp : FOR ID ASSIGN exp TO exp . DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27
	DO	shift 135


	.	error

error:  state 126: shift/reduce conflict (shift OR, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift AND, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift GE, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift GT, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift LE, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift LT, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift NEQ, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift EQ, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift DIVIDE, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift TIMES, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift MINUS, reduce by rule 45)
error:  state 126: shift/reduce conflict (shift PLUS, reduce by rule 45)

state 126:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp THEN exp ELSE exp .  (reduce by rule 45)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 45


state 127:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	recassign : recassign ID EQ exp .  (reduce by rule 41)
	recassign : recassign ID EQ exp . COMMA 

	COMMA	shift 136
	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 41

error:  state 128: shift/reduce conflict (shift OR, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift AND, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift GE, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift GT, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift LE, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift LT, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift NEQ, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift EQ, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift DIVIDE, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift TIMES, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift MINUS, reduce by rule 43)
error:  state 128: shift/reduce conflict (shift PLUS, reduce by rule 43)

state 128:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	arraycreate : ID LBRACK exp RBRACK OF exp .  (reduce by rule 43)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 43


state 129:

	ty : ARRAY OF ID .  (reduce by rule 60)



	.	reduce by rule 60


state 130:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 59)



	.	reduce by rule 59


state 131:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 65)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 65


state 132:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 137
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 133:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 138


	.	error


state 134:

	tyfields : ID COLON ID .  (reduce by rule 62)
	tyfields : ID COLON ID . COMMA tyfields 

	COMMA	shift 139


	.	reduce by rule 62


state 135:

	exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 140
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 136:

	recassign : recassign ID EQ exp COMMA .  (reduce by rule 42)



	.	reduce by rule 42


state 137:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 66)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 66


state 138:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 141


	.	error


state 139:

	tyfields : ID COLON ID COMMA . tyfields 

	ID	shift 114

	tyfields	goto 142

	.	reduce by rule 61

error:  state 140: shift/reduce conflict (shift OR, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift AND, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift GE, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift GT, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift LE, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift LT, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift NEQ, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift EQ, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift DIVIDE, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift TIMES, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift MINUS, reduce by rule 15)
error:  state 140: shift/reduce conflict (shift PLUS, reduce by rule 15)

state 140:

	exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 15)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 15


state 141:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 23
	INT	shift 22
	STRING	shift 21
	LPAREN	shift 20
	MINUS	shift 19
	IF	shift 18
	WHILE	shift 17
	FOR	shift 16
	LET	shift 15
	BREAK	shift 14
	NIL	shift 13

	exp	goto 143
	lvalue	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 142:

	tyfields : ID COLON ID COMMA tyfields .  (reduce by rule 63)



	.	reduce by rule 63


state 143:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 67)

	PLUS	shift 38
	MINUS	shift 37
	TIMES	shift 36
	DIVIDE	shift 35
	EQ	shift 34
	NEQ	shift 33
	LT	shift 32
	LE	shift 31
	GT	shift 30
	GE	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 67


state 144:


	EOF	accept


	.	error

512 of 1025 action table entries left after compaction
458 goto table entries
