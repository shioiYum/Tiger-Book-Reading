structure A = Absyn

open Symbol

fun simpleVar(id: string, pos: int) = A.SimpleVar((symbol id), pos)

%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  exp | program | lvalue | vallessexp | seqs | expseqs
              | negation | funcall | arthcomp | logicops | comrcomp| forcons | whilecons
              | args | recordcreate | arraycreate | recassign
              | assign | ifthen | letexp | decs | dec
              | tydec | vardec | fundec | ty | tyfields | unitexp


%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN



%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program: exp (exp)

exp: lvalue                     (A.VarExp(lvalue))
   | vallessexp                 ()
   | seqs                       ()
   | unitexp                    ()
   | INT                        ()
   | STRING                     ()
   | MINUS exp  %prec UMINUS    ()
   | negation                   ()
   | funcall                    ()
   | arthcomp                   ()
   | logicops                   ()
   | comrcomp                   ()
   | recordcreate               ()
   | arraycreate                ()
   | assign                     ()
   | ifthen                     ()
   | WHILE exp DO exp                      ()
   | FOR ID ASSIGN exp TO exp DO exp       ()
   | letexp                     ()
   | LPAREN exp RPAREN          ()
   | BREAK                      ()
   | NIL                        ()

seqs:
     LPAREN expseqs RPAREN     ()

expseqs: exp                    ()
   | exp SEMICOLON expseqs      ()
   |                            ()

funcall: ID LPAREN args RPAREN ()

args: exp                   ()
    | exp COMMA args        ()
    |                       ()


arthcomp: exp PLUS exp    ()
        | exp MINUS exp   ()
        | exp TIMES exp   ()
        | exp DIVIDE exp  ()

logicops: exp AND exp     ()
        | exp OR exp      ()

comrcomp:
          exp EQ exp    ()
        | exp NEQ exp   ()
        | exp LT exp    ()
        | exp LE exp    ()
        | exp GT exp    ()
        | exp GE exp    ()

recordcreate: ID LBRACE recassign RBRACE ()

recassign: ID EQ exp                  ()
         | ID EQ exp COMMA recassign  ()
         |                            ()


arraycreate: ID LBRACK exp RBRACK OF exp    ()


assign: lvalue ASSIGN exp     ()

ifthen : IF exp THEN exp ELSE exp     ()
       | IF exp THEN exp              ()


letexp: LET decs IN expseqs END       ()

decs: dec decs                     ()
    |                              ()

dec: tydec         ()
   | vardec         ()
   | fundec         ()

tydec: TYPE ID EQ ty              ()

ty: ID                             ()
  | LBRACE tyfields RBRACE         ()
  | ARRAY OF ID                    ()


tyfields:                                   ()
        | ID COLON ID                       ()
        | ID COLON ID COMMA tyfields        ()


vardec: VAR ID ASSIGN exp                    ()
      | VAR ID COLON ID ASSIGN exp           ()


fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp             ()
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp    ()


lvalue: ID                                           (A.SimpleVar((symbol ID), IDleft))
      | lvalue LBRACK exp RBRACK                     (A.SubscriptVar(lvalue, exp, lvalueleft))
      | ID LBRACK exp RBRACK                         (A.SubscriptVar(simpleVar(ID, IDleft), exp, IDleft))
      | lvalue DOT ID                                (A.FieldVar(lvalue, (symbol ID), lvalueleft))


unitexp: LPAREN RPAREN ()


(* merge*)
