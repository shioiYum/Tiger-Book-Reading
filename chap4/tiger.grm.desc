64 shift/reduce conflicts

error:  state 24: shift/reduce conflict (shift LBRACK, reduce by rule 69)
error:  state 40: shift/reduce conflict (shift TYPE, reduce by rule 51)
error:  state 41: shift/reduce conflict (shift FUNCTION, reduce by rule 53)
error:  state 99: shift/reduce conflict (shift OR, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift AND, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift GE, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift GT, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift LE, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift LT, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift NEQ, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift EQ, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift DIVIDE, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift TIMES, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift MINUS, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift PLUS, reduce by rule 15)
error:  state 100: shift/reduce conflict (shift ELSE, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift OR, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift AND, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift GE, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift GT, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift LE, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift LT, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift NEQ, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift EQ, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift DIVIDE, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift TIMES, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift MINUS, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift PLUS, reduce by rule 47)
error:  state 127: shift/reduce conflict (shift OR, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift AND, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift GE, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift GT, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift LE, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift LT, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift NEQ, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift EQ, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift DIVIDE, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift TIMES, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift MINUS, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift PLUS, reduce by rule 46)
error:  state 129: shift/reduce conflict (shift OR, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift AND, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift GE, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift GT, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift LE, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift LT, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift NEQ, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift EQ, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift DIVIDE, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift TIMES, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift MINUS, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift PLUS, reduce by rule 44)
error:  state 141: shift/reduce conflict (shift OR, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift AND, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift GE, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift GT, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift LE, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift LT, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift NEQ, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift EQ, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift DIVIDE, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift TIMES, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift MINUS, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift PLUS, reduce by rule 16)

state 0:

	program : . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 13
	program	goto 145
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 1:

	exp : unitexp .  (reduce by rule 3)



	.	reduce by rule 3


state 2:

	exp : letexp .  (reduce by rule 20)



	.	reduce by rule 20


state 3:

	exp : ifthen .  (reduce by rule 14)



	.	reduce by rule 14


state 4:

	exp : assign .  (reduce by rule 13)



	.	reduce by rule 13


state 5:

	exp : arraycreate .  (reduce by rule 12)



	.	reduce by rule 12


state 6:

	exp : recordcreate .  (reduce by rule 11)



	.	reduce by rule 11


state 7:

	exp : comrcomp .  (reduce by rule 9)



	.	reduce by rule 9


state 8:

	exp : logicops .  (reduce by rule 10)



	.	reduce by rule 10


state 9:

	exp : arthcomp .  (reduce by rule 8)



	.	reduce by rule 8


state 10:

	exp : funcall .  (reduce by rule 7)



	.	reduce by rule 7


state 11:

	exp : seqs .  (reduce by rule 2)



	.	reduce by rule 2


state 12:

	exp : lvalue .  (reduce by rule 1)
	lvalue : lvalue . LBRACK exp RBRACK 
	lvalue : lvalue . DOT ID 
	assign : lvalue . ASSIGN exp 

	LBRACK	shift 27
	DOT	shift 26
	ASSIGN	shift 25


	.	reduce by rule 1


state 13:

	program : exp .  (reduce by rule 0)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 0


state 14:

	exp : NIL .  (reduce by rule 19)



	.	reduce by rule 19


state 15:

	exp : BREAK .  (reduce by rule 18)



	.	reduce by rule 18


state 16:

	letexp : LET . decs IN expseqs END 

	FUNCTION	shift 49
	VAR	shift 48
	TYPE	shift 47

	decs	goto 46
	dec	goto 45
	tydec	goto 44
	vardec	goto 43
	fundec	goto 42
	fundeclist	goto 41
	typedeclist	goto 40

	.	reduce by rule 50


state 17:

	exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 50


	.	error


state 18:

	exp : WHILE . exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 51
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 19:

	ifthen : IF . exp THEN exp ELSE exp 
	ifthen : IF . exp THEN exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 52
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 20:

	exp : MINUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 53
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 21:

	exp : LPAREN . expseqs RPAREN 
	unitexp : LPAREN . RPAREN 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	RPAREN	shift 56
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 55
	lvalue	goto 12
	seqs	goto 11
	expseqs	goto 54
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 22:

	exp : STRING .  (reduce by rule 5)



	.	reduce by rule 5


state 23:

	exp : INT .  (reduce by rule 4)



	.	reduce by rule 4

error:  state 24: shift/reduce conflict (shift LBRACK, reduce by rule 69)

state 24:

	lvalue : ID .  (reduce by rule 69)
	lvalue : ID . LBRACK exp RBRACK 
	funcall : ID . LPAREN args RPAREN 
	recordcreate : ID . LBRACE recassign RBRACE 
	arraycreate : ID . LBRACK exp RBRACK OF exp 

	LPAREN	shift 59
	LBRACK	shift 58
	LBRACE	shift 57


	.	reduce by rule 69


state 25:

	assign : lvalue ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 60
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 26:

	lvalue : lvalue DOT . ID 

	ID	shift 61


	.	error


state 27:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 62
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 28:

	logicops : exp OR . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 63
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 29:

	logicops : exp AND . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 64
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 30:

	comrcomp : exp GE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 65
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 31:

	comrcomp : exp GT . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 66
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 32:

	comrcomp : exp LE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 67
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 33:

	comrcomp : exp LT . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 68
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 34:

	comrcomp : exp NEQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 69
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 35:

	comrcomp : exp EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 70
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 36:

	arthcomp : exp DIVIDE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 71
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 37:

	arthcomp : exp TIMES . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 72
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 38:

	arthcomp : exp MINUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 73
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 39:

	arthcomp : exp PLUS . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 74
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error

error:  state 40: shift/reduce conflict (shift TYPE, reduce by rule 51)

state 40:

	dec : typedeclist .  (reduce by rule 51)
	typedeclist : typedeclist . tydec 

	TYPE	shift 47

	tydec	goto 75

	.	reduce by rule 51

error:  state 41: shift/reduce conflict (shift FUNCTION, reduce by rule 53)

state 41:

	dec : fundeclist .  (reduce by rule 53)
	fundeclist : fundeclist . fundec 

	FUNCTION	shift 49

	fundec	goto 76

	.	reduce by rule 53


state 42:

	fundeclist : fundec .  (reduce by rule 56)



	.	reduce by rule 56


state 43:

	dec : vardec .  (reduce by rule 52)



	.	reduce by rule 52


state 44:

	typedeclist : tydec .  (reduce by rule 54)



	.	reduce by rule 54


state 45:

	decs : dec . decs 

	FUNCTION	shift 49
	VAR	shift 48
	TYPE	shift 47

	decs	goto 77
	dec	goto 45
	tydec	goto 44
	vardec	goto 43
	fundec	goto 42
	fundeclist	goto 41
	typedeclist	goto 40

	.	reduce by rule 50


state 46:

	letexp : LET decs . IN expseqs END 

	IN	shift 78


	.	error


state 47:

	tydec : TYPE . ID EQ ty 

	ID	shift 79


	.	error


state 48:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 80


	.	error


state 49:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 81


	.	error


state 50:

	exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 82


	.	error


state 51:

	exp : WHILE exp . DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	DO	shift 83


	.	error


state 52:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp . THEN exp ELSE exp 
	ifthen : IF exp . THEN exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	THEN	shift 84


	.	error


state 53:

	exp : MINUS exp .  (reduce by rule 6)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 6


state 54:

	exp : LPAREN expseqs . RPAREN 
	expseqs : expseqs . SEMICOLON exp 

	SEMICOLON	shift 86
	RPAREN	shift 85


	.	error


state 55:

	expseqs : exp .  (reduce by rule 21)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 21


state 56:

	unitexp : LPAREN RPAREN .  (reduce by rule 73)



	.	reduce by rule 73


state 57:

	recordcreate : ID LBRACE . recassign RBRACE 


	recassign	goto 87

	.	reduce by rule 41


state 58:

	lvalue : ID LBRACK . exp RBRACK 
	arraycreate : ID LBRACK . exp RBRACK OF exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 88
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 59:

	funcall : ID LPAREN . args RPAREN 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 91
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	args	goto 90
	non_empty_args	goto 89
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	reduce by rule 25


state 60:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	assign : lvalue ASSIGN exp .  (reduce by rule 45)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 45


state 61:

	lvalue : lvalue DOT ID .  (reduce by rule 72)



	.	reduce by rule 72


state 62:

	lvalue : lvalue LBRACK exp . RBRACK 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	RBRACK	shift 92
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	error


state 63:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	logicops : exp OR exp .  (reduce by rule 33)
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30


	.	reduce by rule 33


state 64:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp AND exp .  (reduce by rule 32)
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30


	.	reduce by rule 32


state 65:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	comrcomp : exp GE exp .  (reduce by rule 39)

	EOF	reduce by rule 39
	ID	reduce by rule 39
	COMMA	reduce by rule 39
	SEMICOLON	reduce by rule 39
	RPAREN	reduce by rule 39
	RBRACK	reduce by rule 39
	RBRACE	reduce by rule 39
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 39
	OR	reduce by rule 39
	THEN	reduce by rule 39
	ELSE	reduce by rule 39
	TO	reduce by rule 39
	DO	reduce by rule 39
	IN	reduce by rule 39
	END	reduce by rule 39
	FUNCTION	reduce by rule 39
	VAR	reduce by rule 39
	TYPE	reduce by rule 39


	.	error


state 66:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp GT exp .  (reduce by rule 38)
	comrcomp : exp . GE exp 

	EOF	reduce by rule 38
	ID	reduce by rule 38
	COMMA	reduce by rule 38
	SEMICOLON	reduce by rule 38
	RPAREN	reduce by rule 38
	RBRACK	reduce by rule 38
	RBRACE	reduce by rule 38
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 38
	OR	reduce by rule 38
	THEN	reduce by rule 38
	ELSE	reduce by rule 38
	TO	reduce by rule 38
	DO	reduce by rule 38
	IN	reduce by rule 38
	END	reduce by rule 38
	FUNCTION	reduce by rule 38
	VAR	reduce by rule 38
	TYPE	reduce by rule 38


	.	error


state 67:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp LE exp .  (reduce by rule 37)
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 37
	ID	reduce by rule 37
	COMMA	reduce by rule 37
	SEMICOLON	reduce by rule 37
	RPAREN	reduce by rule 37
	RBRACK	reduce by rule 37
	RBRACE	reduce by rule 37
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 37
	OR	reduce by rule 37
	THEN	reduce by rule 37
	ELSE	reduce by rule 37
	TO	reduce by rule 37
	DO	reduce by rule 37
	IN	reduce by rule 37
	END	reduce by rule 37
	FUNCTION	reduce by rule 37
	VAR	reduce by rule 37
	TYPE	reduce by rule 37


	.	error


state 68:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp LT exp .  (reduce by rule 36)
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 36
	ID	reduce by rule 36
	COMMA	reduce by rule 36
	SEMICOLON	reduce by rule 36
	RPAREN	reduce by rule 36
	RBRACK	reduce by rule 36
	RBRACE	reduce by rule 36
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 36
	OR	reduce by rule 36
	THEN	reduce by rule 36
	ELSE	reduce by rule 36
	TO	reduce by rule 36
	DO	reduce by rule 36
	IN	reduce by rule 36
	END	reduce by rule 36
	FUNCTION	reduce by rule 36
	VAR	reduce by rule 36
	TYPE	reduce by rule 36


	.	error


state 69:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp NEQ exp .  (reduce by rule 35)
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 35
	ID	reduce by rule 35
	COMMA	reduce by rule 35
	SEMICOLON	reduce by rule 35
	RPAREN	reduce by rule 35
	RBRACK	reduce by rule 35
	RBRACE	reduce by rule 35
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 35
	OR	reduce by rule 35
	THEN	reduce by rule 35
	ELSE	reduce by rule 35
	TO	reduce by rule 35
	DO	reduce by rule 35
	IN	reduce by rule 35
	END	reduce by rule 35
	FUNCTION	reduce by rule 35
	VAR	reduce by rule 35
	TYPE	reduce by rule 35


	.	error


state 70:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp EQ exp .  (reduce by rule 34)
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 34
	ID	reduce by rule 34
	COMMA	reduce by rule 34
	SEMICOLON	reduce by rule 34
	RPAREN	reduce by rule 34
	RBRACK	reduce by rule 34
	RBRACE	reduce by rule 34
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	AND	reduce by rule 34
	OR	reduce by rule 34
	THEN	reduce by rule 34
	ELSE	reduce by rule 34
	TO	reduce by rule 34
	DO	reduce by rule 34
	IN	reduce by rule 34
	END	reduce by rule 34
	FUNCTION	reduce by rule 34
	VAR	reduce by rule 34
	TYPE	reduce by rule 34


	.	error


state 71:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	arthcomp : exp DIVIDE exp .  (reduce by rule 31)
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 31


state 72:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp TIMES exp .  (reduce by rule 30)
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 30


state 73:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp MINUS exp .  (reduce by rule 29)
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	TIMES	shift 37
	DIVIDE	shift 36


	.	reduce by rule 29


state 74:

	arthcomp : exp . PLUS exp 
	arthcomp : exp PLUS exp .  (reduce by rule 28)
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	TIMES	shift 37
	DIVIDE	shift 36


	.	reduce by rule 28


state 75:

	typedeclist : typedeclist tydec .  (reduce by rule 55)



	.	reduce by rule 55


state 76:

	fundeclist : fundeclist fundec .  (reduce by rule 57)



	.	reduce by rule 57


state 77:

	decs : dec decs .  (reduce by rule 49)



	.	reduce by rule 49


state 78:

	letexp : LET decs IN . expseqs END 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 55
	lvalue	goto 12
	seqs	goto 11
	expseqs	goto 93
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 79:

	tydec : TYPE ID . EQ ty 

	EQ	shift 94


	.	error


state 80:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 96
	ASSIGN	shift 95


	.	error


state 81:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 97


	.	error


state 82:

	exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 98
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 83:

	exp : WHILE exp DO . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 99
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 84:

	ifthen : IF exp THEN . exp ELSE exp 
	ifthen : IF exp THEN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 100
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 85:

	exp : LPAREN expseqs RPAREN .  (reduce by rule 17)



	.	reduce by rule 17


state 86:

	expseqs : expseqs SEMICOLON . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 101
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 87:

	recordcreate : ID LBRACE recassign . RBRACE 
	recassign : recassign . ID EQ exp 
	recassign : recassign . ID EQ exp COMMA 

	ID	shift 103
	RBRACE	shift 102


	.	error


state 88:

	lvalue : ID LBRACK exp . RBRACK 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	arraycreate : ID LBRACK exp . RBRACK OF exp 

	RBRACK	shift 104
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	error


state 89:

	args : non_empty_args .  (reduce by rule 24)



	.	reduce by rule 24


state 90:

	funcall : ID LPAREN args . RPAREN 
	non_empty_args : args . COMMA exp 

	COMMA	shift 106
	RPAREN	shift 105


	.	error


state 91:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	non_empty_args : exp .  (reduce by rule 26)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 26


state 92:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 70)



	.	reduce by rule 70


state 93:

	expseqs : expseqs . SEMICOLON exp 
	letexp : LET decs IN expseqs . END 

	SEMICOLON	shift 86
	END	shift 107


	.	error


state 94:

	tydec : TYPE ID EQ . ty 

	ID	shift 111
	LBRACE	shift 110
	ARRAY	shift 109

	ty	goto 108

	.	error


state 95:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 112
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 96:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 113


	.	error


state 97:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 115

	tyfields	goto 114

	.	reduce by rule 62


state 98:

	exp : FOR ID ASSIGN exp . TO exp DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	TO	shift 116


	.	error

error:  state 99: shift/reduce conflict (shift OR, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift AND, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift GE, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift GT, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift LE, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift LT, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift NEQ, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift EQ, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift DIVIDE, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift TIMES, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift MINUS, reduce by rule 15)
error:  state 99: shift/reduce conflict (shift PLUS, reduce by rule 15)

state 99:

	exp : WHILE exp DO exp .  (reduce by rule 15)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 15

error:  state 100: shift/reduce conflict (shift ELSE, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift OR, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift AND, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift GE, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift GT, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift LE, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift LT, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift NEQ, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift EQ, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift DIVIDE, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift TIMES, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift MINUS, reduce by rule 47)
error:  state 100: shift/reduce conflict (shift PLUS, reduce by rule 47)

state 100:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp THEN exp . ELSE exp 
	ifthen : IF exp THEN exp .  (reduce by rule 47)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	ELSE	shift 117


	.	reduce by rule 47


state 101:

	expseqs : expseqs SEMICOLON exp .  (reduce by rule 22)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 22


state 102:

	recordcreate : ID LBRACE recassign RBRACE .  (reduce by rule 40)



	.	reduce by rule 40


state 103:

	recassign : recassign ID . EQ exp 
	recassign : recassign ID . EQ exp COMMA 

	EQ	shift 118


	.	error


state 104:

	lvalue : ID LBRACK exp RBRACK .  (reduce by rule 71)
	arraycreate : ID LBRACK exp RBRACK . OF exp 

	OF	shift 119


	.	reduce by rule 71


state 105:

	funcall : ID LPAREN args RPAREN .  (reduce by rule 23)



	.	reduce by rule 23


state 106:

	non_empty_args : args COMMA . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 120
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 107:

	letexp : LET decs IN expseqs END .  (reduce by rule 48)



	.	reduce by rule 48


state 108:

	tydec : TYPE ID EQ ty .  (reduce by rule 58)



	.	reduce by rule 58


state 109:

	ty : ARRAY . OF ID 

	OF	shift 121


	.	error


state 110:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 115

	tyfields	goto 122

	.	reduce by rule 62


state 111:

	ty : ID .  (reduce by rule 59)



	.	reduce by rule 59


state 112:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	vardec : VAR ID ASSIGN exp .  (reduce by rule 65)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 65


state 113:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 123


	.	error


state 114:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 124


	.	error


state 115:

	tyfields : ID . COLON ID 
	tyfields : ID . COLON ID COMMA tyfields 

	COLON	shift 125


	.	error


state 116:

	exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 126
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 117:

	ifthen : IF exp THEN exp ELSE . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 127
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 118:

	recassign : recassign ID EQ . exp 
	recassign : recassign ID EQ . exp COMMA 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 128
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 119:

	arraycreate : ID LBRACK exp RBRACK OF . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 129
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 120:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	non_empty_args : args COMMA exp .  (reduce by rule 27)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 27


state 121:

	ty : ARRAY OF . ID 

	ID	shift 130


	.	error


state 122:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 131


	.	error


state 123:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 132
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 124:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 134
	EQ	shift 133


	.	error


state 125:

	tyfields : ID COLON . ID 
	tyfields : ID COLON . ID COMMA tyfields 

	ID	shift 135


	.	error


state 126:

	exp : FOR ID ASSIGN exp TO exp . DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28
	DO	shift 136


	.	error

error:  state 127: shift/reduce conflict (shift OR, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift AND, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift GE, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift GT, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift LE, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift LT, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift NEQ, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift EQ, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift DIVIDE, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift TIMES, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift MINUS, reduce by rule 46)
error:  state 127: shift/reduce conflict (shift PLUS, reduce by rule 46)

state 127:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp THEN exp ELSE exp .  (reduce by rule 46)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 46


state 128:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	recassign : recassign ID EQ exp .  (reduce by rule 42)
	recassign : recassign ID EQ exp . COMMA 

	COMMA	shift 137
	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 42

error:  state 129: shift/reduce conflict (shift OR, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift AND, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift GE, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift GT, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift LE, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift LT, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift NEQ, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift EQ, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift DIVIDE, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift TIMES, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift MINUS, reduce by rule 44)
error:  state 129: shift/reduce conflict (shift PLUS, reduce by rule 44)

state 129:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	arraycreate : ID LBRACK exp RBRACK OF exp .  (reduce by rule 44)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 44


state 130:

	ty : ARRAY OF ID .  (reduce by rule 61)



	.	reduce by rule 61


state 131:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 60)



	.	reduce by rule 60


state 132:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 66)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 66


state 133:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 138
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 134:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 139


	.	error


state 135:

	tyfields : ID COLON ID .  (reduce by rule 63)
	tyfields : ID COLON ID . COMMA tyfields 

	COMMA	shift 140


	.	reduce by rule 63


state 136:

	exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 141
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 137:

	recassign : recassign ID EQ exp COMMA .  (reduce by rule 43)



	.	reduce by rule 43


state 138:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 67)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 67


state 139:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 142


	.	error


state 140:

	tyfields : ID COLON ID COMMA . tyfields 

	ID	shift 115

	tyfields	goto 143

	.	reduce by rule 62

error:  state 141: shift/reduce conflict (shift OR, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift AND, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift GE, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift GT, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift LE, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift LT, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift NEQ, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift EQ, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift DIVIDE, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift TIMES, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift MINUS, reduce by rule 16)
error:  state 141: shift/reduce conflict (shift PLUS, reduce by rule 16)

state 141:

	exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 16)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 16


state 142:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 24
	INT	shift 23
	STRING	shift 22
	LPAREN	shift 21
	MINUS	shift 20
	IF	shift 19
	WHILE	shift 18
	FOR	shift 17
	LET	shift 16
	BREAK	shift 15
	NIL	shift 14

	exp	goto 144
	lvalue	goto 12
	seqs	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 143:

	tyfields : ID COLON ID COMMA tyfields .  (reduce by rule 64)



	.	reduce by rule 64


state 144:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 68)

	PLUS	shift 39
	MINUS	shift 38
	TIMES	shift 37
	DIVIDE	shift 36
	EQ	shift 35
	NEQ	shift 34
	LT	shift 33
	LE	shift 32
	GT	shift 31
	GE	shift 30
	AND	shift 29
	OR	shift 28


	.	reduce by rule 68


state 145:


	EOF	accept


	.	error

512 of 1026 action table entries left after compaction
494 goto table entries
