64 shift/reduce conflicts

error:  state 24: shift/reduce conflict (shift RPAREN, reduce by rule 26)
error:  state 27: shift/reduce conflict (shift LBRACK, reduce by rule 66)
error:  state 58: shift/reduce conflict (shift RPAREN, reduce by rule 24)
error:  state 101: shift/reduce conflict (shift OR, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift AND, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift GE, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift GT, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift LE, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift LT, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift NEQ, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift EQ, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift DIVIDE, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift TIMES, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift MINUS, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift PLUS, reduce by rule 17)
error:  state 102: shift/reduce conflict (shift ELSE, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift OR, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift AND, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift GE, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift GT, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift LE, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift LT, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift NEQ, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift EQ, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift DIVIDE, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift TIMES, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift MINUS, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift PLUS, reduce by rule 48)
error:  state 128: shift/reduce conflict (shift OR, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift AND, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift GE, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift GT, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift LE, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift LT, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift NEQ, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift EQ, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift DIVIDE, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift TIMES, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift MINUS, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift PLUS, reduce by rule 47)
error:  state 130: shift/reduce conflict (shift OR, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift AND, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift GE, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift GT, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift LE, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift LT, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift NEQ, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift EQ, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift DIVIDE, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift TIMES, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift MINUS, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift PLUS, reduce by rule 45)
error:  state 141: shift/reduce conflict (shift OR, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift AND, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift GE, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift GT, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift LE, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift LT, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift NEQ, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift EQ, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift DIVIDE, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift TIMES, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift MINUS, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift PLUS, reduce by rule 18)

state 0:

	program : . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 15
	program	goto 145
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 1:

	exp : unitexp .  (reduce by rule 4)



	.	reduce by rule 4


state 2:

	exp : letexp .  (reduce by rule 19)



	.	reduce by rule 19


state 3:

	exp : ifthen .  (reduce by rule 16)



	.	reduce by rule 16


state 4:

	exp : assign .  (reduce by rule 15)



	.	reduce by rule 15


state 5:

	exp : arraycreate .  (reduce by rule 14)



	.	reduce by rule 14


state 6:

	exp : recordcreate .  (reduce by rule 13)



	.	reduce by rule 13


state 7:

	exp : comrcomp .  (reduce by rule 12)



	.	reduce by rule 12


state 8:

	exp : logicops .  (reduce by rule 11)



	.	reduce by rule 11


state 9:

	exp : arthcomp .  (reduce by rule 10)



	.	reduce by rule 10


state 10:

	exp : funcall .  (reduce by rule 9)



	.	reduce by rule 9


state 11:

	exp : negation .  (reduce by rule 8)



	.	reduce by rule 8


state 12:

	exp : seqs .  (reduce by rule 3)



	.	reduce by rule 3


state 13:

	exp : vallessexp .  (reduce by rule 2)



	.	reduce by rule 2


state 14:

	exp : lvalue .  (reduce by rule 1)
	lvalue : lvalue . LBRACK exp RBRACK 
	lvalue : lvalue . DOT ID 
	assign : lvalue . ASSIGN exp 

	LBRACK	shift 30
	DOT	shift 29
	ASSIGN	shift 28


	.	reduce by rule 1


state 15:

	program : exp .  (reduce by rule 0)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 0


state 16:

	exp : NIL .  (reduce by rule 22)



	.	reduce by rule 22


state 17:

	exp : BREAK .  (reduce by rule 21)



	.	reduce by rule 21


state 18:

	letexp : LET . decs IN expseqs END 

	FUNCTION	shift 50
	VAR	shift 49
	TYPE	shift 48

	decs	goto 47
	dec	goto 46
	tydec	goto 45
	vardec	goto 44
	fundec	goto 43

	.	reduce by rule 51


state 19:

	exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 51


	.	error


state 20:

	exp : WHILE . exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 52
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 21:

	ifthen : IF . exp THEN exp ELSE exp 
	ifthen : IF . exp THEN exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 53
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 22:

	exp : MINUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 54
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 23:

	recordcreate : LBRACE . recassign RBRACE 

	ID	shift 56

	recassign	goto 55

	.	error

error:  state 24: shift/reduce conflict (shift RPAREN, reduce by rule 26)

state 24:

	exp : LPAREN . exp RPAREN 
	seqs : LPAREN . expseqs RPAREN 
	unitexp : LPAREN . RPAREN 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	RPAREN	shift 59
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 58
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	expseqs	goto 57
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 25:

	exp : STRING .  (reduce by rule 6)



	.	reduce by rule 6


state 26:

	exp : INT .  (reduce by rule 5)



	.	reduce by rule 5

error:  state 27: shift/reduce conflict (shift LBRACK, reduce by rule 66)

state 27:

	lvalue : ID .  (reduce by rule 66)
	funcall : ID . LPAREN args RPAREN 
	arraycreate : ID . LBRACK exp RBRACK OF exp 

	LPAREN	shift 61
	LBRACK	shift 60


	.	reduce by rule 66


state 28:

	assign : lvalue ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 62
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 29:

	lvalue : lvalue DOT . ID 

	ID	shift 63


	.	error


state 30:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 64
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 31:

	logicops : exp OR . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 65
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 32:

	logicops : exp AND . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 66
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 33:

	comrcomp : exp GE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 67
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 34:

	comrcomp : exp GT . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 68
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 35:

	comrcomp : exp LE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 69
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 36:

	comrcomp : exp LT . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 70
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 37:

	comrcomp : exp NEQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 71
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 38:

	comrcomp : exp EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 72
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 39:

	arthcomp : exp DIVIDE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 73
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 40:

	arthcomp : exp TIMES . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 74
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 41:

	arthcomp : exp MINUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 75
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 42:

	arthcomp : exp PLUS . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 76
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 43:

	dec : fundec .  (reduce by rule 54)



	.	reduce by rule 54


state 44:

	dec : vardec .  (reduce by rule 53)



	.	reduce by rule 53


state 45:

	dec : tydec .  (reduce by rule 52)



	.	reduce by rule 52


state 46:

	decs : dec . decs 

	FUNCTION	shift 50
	VAR	shift 49
	TYPE	shift 48

	decs	goto 77
	dec	goto 46
	tydec	goto 45
	vardec	goto 44
	fundec	goto 43

	.	reduce by rule 51


state 47:

	letexp : LET decs . IN expseqs END 

	IN	shift 78


	.	error


state 48:

	tydec : TYPE . ID EQ ty 

	ID	shift 79


	.	error


state 49:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 80


	.	error


state 50:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 81


	.	error


state 51:

	exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 82


	.	error


state 52:

	exp : WHILE exp . DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31
	DO	shift 83


	.	error


state 53:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp . THEN exp ELSE exp 
	ifthen : IF exp . THEN exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31
	THEN	shift 84


	.	error


state 54:

	exp : MINUS exp .  (reduce by rule 7)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 7


state 55:

	recordcreate : LBRACE recassign . RBRACE 

	RBRACE	shift 85


	.	error


state 56:

	recassign : ID . EQ exp 
	recassign : ID . EQ exp COMMA recassign 

	EQ	shift 86


	.	error


state 57:

	seqs : LPAREN expseqs . RPAREN 

	RPAREN	shift 87


	.	error

error:  state 58: shift/reduce conflict (shift RPAREN, reduce by rule 24)

state 58:

	exp : LPAREN exp . RPAREN 
	expseqs : exp .  (reduce by rule 24)
	expseqs : exp . SEMICOLON expseqs 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	SEMICOLON	shift 89
	RPAREN	shift 88
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	error


state 59:

	unitexp : LPAREN RPAREN .  (reduce by rule 69)



	.	reduce by rule 69


state 60:

	arraycreate : ID LBRACK . exp RBRACK OF exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 90
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 61:

	funcall : ID LPAREN . args RPAREN 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 92
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	args	goto 91
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 62:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	assign : lvalue ASSIGN exp .  (reduce by rule 46)

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 46


state 63:

	lvalue : lvalue DOT ID .  (reduce by rule 68)



	.	reduce by rule 68


state 64:

	lvalue : lvalue LBRACK exp . RBRACK 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	RBRACK	shift 93
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	error


state 65:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	logicops : exp OR exp .  (reduce by rule 35)
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33


	.	reduce by rule 35


state 66:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp AND exp .  (reduce by rule 34)
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33


	.	reduce by rule 34


state 67:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	comrcomp : exp GE exp .  (reduce by rule 41)

	EOF	reduce by rule 41
	COMMA	reduce by rule 41
	SEMICOLON	reduce by rule 41
	RPAREN	reduce by rule 41
	RBRACK	reduce by rule 41
	RBRACE	reduce by rule 41
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	AND	reduce by rule 41
	OR	reduce by rule 41
	THEN	reduce by rule 41
	ELSE	reduce by rule 41
	TO	reduce by rule 41
	DO	reduce by rule 41
	IN	reduce by rule 41
	END	reduce by rule 41
	FUNCTION	reduce by rule 41
	VAR	reduce by rule 41
	TYPE	reduce by rule 41


	.	error


state 68:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp GT exp .  (reduce by rule 40)
	comrcomp : exp . GE exp 

	EOF	reduce by rule 40
	COMMA	reduce by rule 40
	SEMICOLON	reduce by rule 40
	RPAREN	reduce by rule 40
	RBRACK	reduce by rule 40
	RBRACE	reduce by rule 40
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	AND	reduce by rule 40
	OR	reduce by rule 40
	THEN	reduce by rule 40
	ELSE	reduce by rule 40
	TO	reduce by rule 40
	DO	reduce by rule 40
	IN	reduce by rule 40
	END	reduce by rule 40
	FUNCTION	reduce by rule 40
	VAR	reduce by rule 40
	TYPE	reduce by rule 40


	.	error


state 69:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp LE exp .  (reduce by rule 39)
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 39
	COMMA	reduce by rule 39
	SEMICOLON	reduce by rule 39
	RPAREN	reduce by rule 39
	RBRACK	reduce by rule 39
	RBRACE	reduce by rule 39
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	AND	reduce by rule 39
	OR	reduce by rule 39
	THEN	reduce by rule 39
	ELSE	reduce by rule 39
	TO	reduce by rule 39
	DO	reduce by rule 39
	IN	reduce by rule 39
	END	reduce by rule 39
	FUNCTION	reduce by rule 39
	VAR	reduce by rule 39
	TYPE	reduce by rule 39


	.	error


state 70:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp LT exp .  (reduce by rule 38)
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 38
	COMMA	reduce by rule 38
	SEMICOLON	reduce by rule 38
	RPAREN	reduce by rule 38
	RBRACK	reduce by rule 38
	RBRACE	reduce by rule 38
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	AND	reduce by rule 38
	OR	reduce by rule 38
	THEN	reduce by rule 38
	ELSE	reduce by rule 38
	TO	reduce by rule 38
	DO	reduce by rule 38
	IN	reduce by rule 38
	END	reduce by rule 38
	FUNCTION	reduce by rule 38
	VAR	reduce by rule 38
	TYPE	reduce by rule 38


	.	error


state 71:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp NEQ exp .  (reduce by rule 37)
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 37
	COMMA	reduce by rule 37
	SEMICOLON	reduce by rule 37
	RPAREN	reduce by rule 37
	RBRACK	reduce by rule 37
	RBRACE	reduce by rule 37
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	AND	reduce by rule 37
	OR	reduce by rule 37
	THEN	reduce by rule 37
	ELSE	reduce by rule 37
	TO	reduce by rule 37
	DO	reduce by rule 37
	IN	reduce by rule 37
	END	reduce by rule 37
	FUNCTION	reduce by rule 37
	VAR	reduce by rule 37
	TYPE	reduce by rule 37


	.	error


state 72:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp EQ exp .  (reduce by rule 36)
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	EOF	reduce by rule 36
	COMMA	reduce by rule 36
	SEMICOLON	reduce by rule 36
	RPAREN	reduce by rule 36
	RBRACK	reduce by rule 36
	RBRACE	reduce by rule 36
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	AND	reduce by rule 36
	OR	reduce by rule 36
	THEN	reduce by rule 36
	ELSE	reduce by rule 36
	TO	reduce by rule 36
	DO	reduce by rule 36
	IN	reduce by rule 36
	END	reduce by rule 36
	FUNCTION	reduce by rule 36
	VAR	reduce by rule 36
	TYPE	reduce by rule 36


	.	error


state 73:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	arthcomp : exp DIVIDE exp .  (reduce by rule 33)
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 33


state 74:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp TIMES exp .  (reduce by rule 32)
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 



	.	reduce by rule 32


state 75:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp MINUS exp .  (reduce by rule 31)
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	TIMES	shift 40
	DIVIDE	shift 39


	.	reduce by rule 31


state 76:

	arthcomp : exp . PLUS exp 
	arthcomp : exp PLUS exp .  (reduce by rule 30)
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	TIMES	shift 40
	DIVIDE	shift 39


	.	reduce by rule 30


state 77:

	decs : dec decs .  (reduce by rule 50)



	.	reduce by rule 50


state 78:

	letexp : LET decs IN . expseqs END 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 95
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	expseqs	goto 94
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	reduce by rule 26


state 79:

	tydec : TYPE ID . EQ ty 

	EQ	shift 96


	.	error


state 80:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 98
	ASSIGN	shift 97


	.	error


state 81:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 99


	.	error


state 82:

	exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 100
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 83:

	exp : WHILE exp DO . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 101
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 84:

	ifthen : IF exp THEN . exp ELSE exp 
	ifthen : IF exp THEN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 102
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 85:

	recordcreate : LBRACE recassign RBRACE .  (reduce by rule 42)



	.	reduce by rule 42


state 86:

	recassign : ID EQ . exp 
	recassign : ID EQ . exp COMMA recassign 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 103
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 87:

	seqs : LPAREN expseqs RPAREN .  (reduce by rule 23)



	.	reduce by rule 23


state 88:

	exp : LPAREN exp RPAREN .  (reduce by rule 20)



	.	reduce by rule 20


state 89:

	expseqs : exp SEMICOLON . expseqs 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 95
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	expseqs	goto 104
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	reduce by rule 26


state 90:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	arraycreate : ID LBRACK exp . RBRACK OF exp 

	RBRACK	shift 105
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	error


state 91:

	funcall : ID LPAREN args . RPAREN 

	RPAREN	shift 106


	.	error


state 92:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	args : exp .  (reduce by rule 28)
	args : exp . COMMA args 

	COMMA	shift 107
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 28


state 93:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 67)



	.	reduce by rule 67


state 94:

	letexp : LET decs IN expseqs . END 

	END	shift 108


	.	error


state 95:

	expseqs : exp .  (reduce by rule 24)
	expseqs : exp . SEMICOLON expseqs 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	SEMICOLON	shift 89
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 24


state 96:

	tydec : TYPE ID EQ . ty 

	ID	shift 112
	LBRACE	shift 111
	ARRAY	shift 110

	ty	goto 109

	.	error


state 97:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 113
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 98:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 114


	.	error


state 99:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 116

	tyfields	goto 115

	.	reduce by rule 59


state 100:

	exp : FOR ID ASSIGN exp . TO exp DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31
	TO	shift 117


	.	error

error:  state 101: shift/reduce conflict (shift OR, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift AND, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift GE, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift GT, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift LE, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift LT, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift NEQ, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift EQ, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift DIVIDE, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift TIMES, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift MINUS, reduce by rule 17)
error:  state 101: shift/reduce conflict (shift PLUS, reduce by rule 17)

state 101:

	exp : WHILE exp DO exp .  (reduce by rule 17)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 17

error:  state 102: shift/reduce conflict (shift ELSE, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift OR, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift AND, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift GE, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift GT, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift LE, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift LT, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift NEQ, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift EQ, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift DIVIDE, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift TIMES, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift MINUS, reduce by rule 48)
error:  state 102: shift/reduce conflict (shift PLUS, reduce by rule 48)

state 102:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp THEN exp . ELSE exp 
	ifthen : IF exp THEN exp .  (reduce by rule 48)

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31
	ELSE	shift 118


	.	reduce by rule 48


state 103:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	recassign : ID EQ exp .  (reduce by rule 43)
	recassign : ID EQ exp . COMMA recassign 

	COMMA	shift 119
	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 43


state 104:

	expseqs : exp SEMICOLON expseqs .  (reduce by rule 25)



	.	reduce by rule 25


state 105:

	arraycreate : ID LBRACK exp RBRACK . OF exp 

	OF	shift 120


	.	error


state 106:

	funcall : ID LPAREN args RPAREN .  (reduce by rule 27)



	.	reduce by rule 27


state 107:

	args : exp COMMA . args 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 92
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	args	goto 121
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 108:

	letexp : LET decs IN expseqs END .  (reduce by rule 49)



	.	reduce by rule 49


state 109:

	tydec : TYPE ID EQ ty .  (reduce by rule 55)



	.	reduce by rule 55


state 110:

	ty : ARRAY . OF ID 

	OF	shift 122


	.	error


state 111:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 116

	tyfields	goto 123

	.	reduce by rule 59


state 112:

	ty : ID .  (reduce by rule 56)



	.	reduce by rule 56


state 113:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	vardec : VAR ID ASSIGN exp .  (reduce by rule 62)

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 62


state 114:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 124


	.	error


state 115:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 125


	.	error


state 116:

	tyfields : ID . COLON ID 
	tyfields : ID . COLON ID COMMA tyfields 

	COLON	shift 126


	.	error


state 117:

	exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 127
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 118:

	ifthen : IF exp THEN exp ELSE . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 128
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 119:

	recassign : ID EQ exp COMMA . recassign 

	ID	shift 56

	recassign	goto 129

	.	error


state 120:

	arraycreate : ID LBRACK exp RBRACK OF . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 130
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 121:

	args : exp COMMA args .  (reduce by rule 29)



	.	reduce by rule 29


state 122:

	ty : ARRAY OF . ID 

	ID	shift 131


	.	error


state 123:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 132


	.	error


state 124:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 133
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 125:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 135
	EQ	shift 134


	.	error


state 126:

	tyfields : ID COLON . ID 
	tyfields : ID COLON . ID COMMA tyfields 

	ID	shift 136


	.	error


state 127:

	exp : FOR ID ASSIGN exp TO exp . DO exp 
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31
	DO	shift 137


	.	error

error:  state 128: shift/reduce conflict (shift OR, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift AND, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift GE, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift GT, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift LE, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift LT, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift NEQ, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift EQ, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift DIVIDE, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift TIMES, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift MINUS, reduce by rule 47)
error:  state 128: shift/reduce conflict (shift PLUS, reduce by rule 47)

state 128:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	ifthen : IF exp THEN exp ELSE exp .  (reduce by rule 47)

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 47


state 129:

	recassign : ID EQ exp COMMA recassign .  (reduce by rule 44)



	.	reduce by rule 44

error:  state 130: shift/reduce conflict (shift OR, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift AND, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift GE, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift GT, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift LE, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift LT, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift NEQ, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift EQ, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift DIVIDE, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift TIMES, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift MINUS, reduce by rule 45)
error:  state 130: shift/reduce conflict (shift PLUS, reduce by rule 45)

state 130:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	arraycreate : ID LBRACK exp RBRACK OF exp .  (reduce by rule 45)

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 45


state 131:

	ty : ARRAY OF ID .  (reduce by rule 58)



	.	reduce by rule 58


state 132:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 57)



	.	reduce by rule 57


state 133:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 63)

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 63


state 134:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 138
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 135:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 139


	.	error


state 136:

	tyfields : ID COLON ID .  (reduce by rule 60)
	tyfields : ID COLON ID . COMMA tyfields 

	COMMA	shift 140


	.	reduce by rule 60


state 137:

	exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 141
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 138:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 64)

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 64


state 139:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 142


	.	error


state 140:

	tyfields : ID COLON ID COMMA . tyfields 

	ID	shift 116

	tyfields	goto 143

	.	reduce by rule 59

error:  state 141: shift/reduce conflict (shift OR, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift AND, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift GE, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift GT, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift LE, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift LT, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift NEQ, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift EQ, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift DIVIDE, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift TIMES, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift MINUS, reduce by rule 18)
error:  state 141: shift/reduce conflict (shift PLUS, reduce by rule 18)

state 141:

	exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 18)
	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 18


state 142:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 27
	INT	shift 26
	STRING	shift 25
	LPAREN	shift 24
	LBRACE	shift 23
	MINUS	shift 22
	IF	shift 21
	WHILE	shift 20
	FOR	shift 19
	LET	shift 18
	BREAK	shift 17
	NIL	shift 16

	exp	goto 144
	lvalue	goto 14
	vallessexp	goto 13
	seqs	goto 12
	negation	goto 11
	funcall	goto 10
	arthcomp	goto 9
	logicops	goto 8
	comrcomp	goto 7
	recordcreate	goto 6
	arraycreate	goto 5
	assign	goto 4
	ifthen	goto 3
	letexp	goto 2
	unitexp	goto 1

	.	error


state 143:

	tyfields : ID COLON ID COMMA tyfields .  (reduce by rule 61)



	.	reduce by rule 61


state 144:

	arthcomp : exp . PLUS exp 
	arthcomp : exp . MINUS exp 
	arthcomp : exp . TIMES exp 
	arthcomp : exp . DIVIDE exp 
	logicops : exp . AND exp 
	logicops : exp . OR exp 
	comrcomp : exp . EQ exp 
	comrcomp : exp . NEQ exp 
	comrcomp : exp . LT exp 
	comrcomp : exp . LE exp 
	comrcomp : exp . GT exp 
	comrcomp : exp . GE exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 65)

	PLUS	shift 42
	MINUS	shift 41
	TIMES	shift 40
	DIVIDE	shift 39
	EQ	shift 38
	NEQ	shift 37
	LT	shift 36
	LE	shift 35
	GT	shift 34
	GE	shift 33
	AND	shift 32
	OR	shift 31


	.	reduce by rule 65


state 145:


	EOF	accept


	.	error

495 of 1043 action table entries left after compaction
562 goto table entries
