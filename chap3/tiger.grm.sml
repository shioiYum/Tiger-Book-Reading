functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(*#line 1.2 "tiger.grm"*)
(*#line 12.1 "tiger.grm.sml"*)
end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\184\000\005\000\184\000\007\000\184\000\009\000\184\000\
\\011\000\184\000\013\000\184\000\015\000\044\000\016\000\043\000\
\\017\000\042\000\018\000\041\000\025\000\184\000\026\000\184\000\
\\030\000\184\000\031\000\184\000\034\000\184\000\035\000\184\000\
\\037\000\184\000\038\000\184\000\042\000\184\000\043\000\184\000\
\\044\000\184\000\000\000\
\\001\000\001\000\185\000\005\000\185\000\007\000\185\000\009\000\185\000\
\\011\000\185\000\013\000\185\000\015\000\044\000\016\000\043\000\
\\017\000\042\000\018\000\041\000\025\000\185\000\026\000\185\000\
\\030\000\185\000\031\000\185\000\034\000\185\000\035\000\185\000\
\\037\000\185\000\038\000\185\000\042\000\185\000\043\000\185\000\
\\044\000\185\000\000\000\
\\001\000\001\000\186\000\005\000\186\000\007\000\186\000\009\000\186\000\
\\011\000\186\000\013\000\186\000\015\000\044\000\016\000\043\000\
\\017\000\042\000\018\000\041\000\025\000\186\000\026\000\186\000\
\\030\000\186\000\031\000\186\000\034\000\186\000\035\000\186\000\
\\037\000\186\000\038\000\186\000\042\000\186\000\043\000\186\000\
\\044\000\186\000\000\000\
\\001\000\001\000\187\000\005\000\187\000\007\000\187\000\009\000\187\000\
\\011\000\187\000\013\000\187\000\015\000\044\000\016\000\043\000\
\\017\000\042\000\018\000\041\000\025\000\187\000\026\000\187\000\
\\030\000\187\000\031\000\187\000\034\000\187\000\035\000\187\000\
\\037\000\187\000\038\000\187\000\042\000\187\000\043\000\187\000\
\\044\000\187\000\000\000\
\\001\000\001\000\188\000\005\000\188\000\007\000\188\000\009\000\188\000\
\\011\000\188\000\013\000\188\000\015\000\044\000\016\000\043\000\
\\017\000\042\000\018\000\041\000\025\000\188\000\026\000\188\000\
\\030\000\188\000\031\000\188\000\034\000\188\000\035\000\188\000\
\\037\000\188\000\038\000\188\000\042\000\188\000\043\000\188\000\
\\044\000\188\000\000\000\
\\001\000\001\000\189\000\005\000\189\000\007\000\189\000\009\000\189\000\
\\011\000\189\000\013\000\189\000\015\000\044\000\016\000\043\000\
\\017\000\042\000\018\000\041\000\025\000\189\000\026\000\189\000\
\\030\000\189\000\031\000\189\000\034\000\189\000\035\000\189\000\
\\037\000\189\000\038\000\189\000\042\000\189\000\043\000\189\000\
\\044\000\189\000\000\000\
\\001\000\002\000\029\000\003\000\028\000\004\000\027\000\008\000\026\000\
\\009\000\061\000\012\000\025\000\016\000\024\000\029\000\023\000\
\\032\000\022\000\033\000\021\000\036\000\020\000\040\000\019\000\
\\041\000\018\000\000\000\
\\001\000\002\000\029\000\003\000\028\000\004\000\027\000\008\000\026\000\
\\012\000\025\000\016\000\024\000\029\000\023\000\032\000\022\000\
\\033\000\021\000\036\000\020\000\040\000\019\000\041\000\018\000\000\000\
\\001\000\002\000\053\000\000\000\
\\001\000\002\000\058\000\000\000\
\\001\000\002\000\065\000\000\000\
\\001\000\002\000\081\000\000\000\
\\001\000\002\000\082\000\000\000\
\\001\000\002\000\083\000\000\000\
\\001\000\002\000\114\000\012\000\113\000\028\000\112\000\000\000\
\\001\000\002\000\116\000\000\000\
\\001\000\002\000\133\000\000\000\
\\001\000\002\000\138\000\000\000\
\\001\000\002\000\141\000\000\000\
\\001\000\006\000\100\000\027\000\099\000\000\000\
\\001\000\006\000\128\000\000\000\
\\001\000\006\000\137\000\019\000\136\000\000\000\
\\001\000\007\000\091\000\009\000\090\000\015\000\044\000\016\000\043\000\
\\017\000\042\000\018\000\041\000\019\000\040\000\020\000\039\000\
\\021\000\038\000\022\000\037\000\023\000\036\000\024\000\035\000\
\\025\000\034\000\026\000\033\000\000\000\
\\001\000\008\000\101\000\000\000\
\\001\000\009\000\089\000\000\000\
\\001\000\009\000\108\000\000\000\
\\001\000\009\000\127\000\000\000\
\\001\000\011\000\095\000\015\000\044\000\016\000\043\000\017\000\042\000\
\\018\000\041\000\019\000\040\000\020\000\039\000\021\000\038\000\
\\022\000\037\000\023\000\036\000\024\000\035\000\025\000\034\000\
\\026\000\033\000\000\000\
\\001\000\011\000\107\000\015\000\044\000\016\000\043\000\017\000\042\000\
\\018\000\041\000\019\000\040\000\020\000\039\000\021\000\038\000\
\\022\000\037\000\023\000\036\000\024\000\035\000\025\000\034\000\
\\026\000\033\000\000\000\
\\001\000\013\000\087\000\000\000\
\\001\000\013\000\134\000\000\000\
\\001\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\
\\030\000\086\000\000\000\
\\001\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\
\\034\000\119\000\000\000\
\\001\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\
\\035\000\085\000\000\000\
\\001\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\
\\035\000\139\000\000\000\
\\001\000\019\000\088\000\000\000\
\\001\000\019\000\098\000\000\000\
\\001\000\019\000\144\000\000\000\
\\001\000\027\000\084\000\000\000\
\\001\000\027\000\126\000\000\000\
\\001\000\037\000\080\000\000\000\
\\001\000\038\000\110\000\000\000\
\\001\000\039\000\122\000\000\000\
\\001\000\039\000\124\000\000\000\
\\148\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\149\000\010\000\032\000\014\000\031\000\027\000\030\000\000\000\
\\150\000\000\000\
\\151\000\000\000\
\\152\000\000\000\
\\153\000\000\000\
\\154\000\000\000\
\\155\000\000\000\
\\156\000\000\000\
\\157\000\000\000\
\\158\000\000\000\
\\159\000\000\000\
\\160\000\000\000\
\\161\000\000\000\
\\162\000\000\000\
\\163\000\000\000\
\\164\000\000\000\
\\165\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\166\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\167\000\000\000\
\\168\000\000\000\
\\169\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\007\000\091\000\015\000\044\000\016\000\043\000\017\000\042\000\
\\018\000\041\000\019\000\040\000\020\000\039\000\021\000\038\000\
\\022\000\037\000\023\000\036\000\024\000\035\000\025\000\034\000\
\\026\000\033\000\000\000\
\\173\000\000\000\
\\174\000\002\000\029\000\003\000\028\000\004\000\027\000\008\000\026\000\
\\012\000\025\000\016\000\024\000\029\000\023\000\032\000\022\000\
\\033\000\021\000\036\000\020\000\040\000\019\000\041\000\018\000\000\000\
\\175\000\000\000\
\\176\000\005\000\109\000\015\000\044\000\016\000\043\000\017\000\042\000\
\\018\000\041\000\019\000\040\000\020\000\039\000\021\000\038\000\
\\022\000\037\000\023\000\036\000\024\000\035\000\025\000\034\000\
\\026\000\033\000\000\000\
\\177\000\000\000\
\\178\000\017\000\042\000\018\000\041\000\000\000\
\\179\000\017\000\042\000\018\000\041\000\000\000\
\\180\000\000\000\
\\181\000\000\000\
\\182\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\000\000\
\\183\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\000\000\
\\190\000\000\000\
\\191\000\005\000\121\000\015\000\044\000\016\000\043\000\017\000\042\000\
\\018\000\041\000\019\000\040\000\020\000\039\000\021\000\038\000\
\\022\000\037\000\023\000\036\000\024\000\035\000\025\000\034\000\
\\026\000\033\000\000\000\
\\192\000\000\000\
\\193\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\194\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\195\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\196\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\
\\031\000\120\000\000\000\
\\197\000\000\000\
\\198\000\000\000\
\\199\000\042\000\052\000\043\000\051\000\044\000\050\000\000\000\
\\200\000\000\000\
\\201\000\000\000\
\\202\000\000\000\
\\203\000\000\000\
\\204\000\000\000\
\\205\000\000\000\
\\206\000\000\000\
\\207\000\002\000\118\000\000\000\
\\208\000\005\000\142\000\000\000\
\\209\000\000\000\
\\210\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\211\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\212\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\213\000\015\000\044\000\016\000\043\000\017\000\042\000\018\000\041\000\
\\019\000\040\000\020\000\039\000\021\000\038\000\022\000\037\000\
\\023\000\036\000\024\000\035\000\025\000\034\000\026\000\033\000\000\000\
\\214\000\008\000\063\000\010\000\062\000\000\000\
\\215\000\000\000\
\\216\000\000\000\
\\217\000\000\000\
\"
val actionRowNumbers =
"\008\000\049\000\064\000\061\000\
\\060\000\059\000\058\000\057\000\
\\056\000\055\000\054\000\053\000\
\\048\000\047\000\046\000\045\000\
\\067\000\066\000\090\000\009\000\
\\008\000\008\000\008\000\010\000\
\\007\000\051\000\050\000\105\000\
\\008\000\011\000\008\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\008\000\008\000\093\000\
\\092\000\091\000\090\000\041\000\
\\012\000\013\000\014\000\039\000\
\\034\000\032\000\052\000\030\000\
\\036\000\025\000\023\000\108\000\
\\008\000\008\000\085\000\107\000\
\\028\000\080\000\079\000\006\000\
\\005\000\004\000\003\000\002\000\
\\001\000\078\000\077\000\076\000\
\\075\000\089\000\071\000\037\000\
\\020\000\024\000\008\000\008\000\
\\008\000\081\000\008\000\068\000\
\\065\000\071\000\029\000\026\000\
\\073\000\106\000\042\000\069\000\
\\015\000\008\000\016\000\098\000\
\\033\000\062\000\087\000\082\000\
\\070\000\043\000\072\000\008\000\
\\088\000\094\000\044\000\098\000\
\\095\000\101\000\040\000\027\000\
\\021\000\008\000\008\000\010\000\
\\008\000\074\000\017\000\031\000\
\\008\000\022\000\018\000\035\000\
\\086\000\083\000\084\000\097\000\
\\096\000\102\000\008\000\019\000\
\\099\000\008\000\103\000\038\000\
\\098\000\063\000\008\000\100\000\
\\104\000\000\000"
val gotoT =
"\
\\001\000\015\000\002\000\145\000\003\000\014\000\004\000\013\000\
\\005\000\012\000\007\000\011\000\008\000\010\000\009\000\009\000\
\\010\000\008\000\011\000\007\000\015\000\006\000\016\000\005\000\
\\018\000\004\000\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\047\000\022\000\046\000\023\000\045\000\024\000\044\000\
\\025\000\043\000\000\000\
\\000\000\
\\001\000\052\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\053\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\054\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\017\000\055\000\000\000\
\\001\000\058\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\057\000\007\000\011\000\008\000\010\000\009\000\009\000\
\\010\000\008\000\011\000\007\000\015\000\006\000\016\000\005\000\
\\018\000\004\000\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\062\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\001\000\064\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\065\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\066\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\067\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\068\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\069\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\070\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\071\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\072\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\073\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\074\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\075\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\076\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\021\000\077\000\022\000\046\000\023\000\045\000\024\000\044\000\
\\025\000\043\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\090\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\092\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\014\000\091\000\015\000\006\000\016\000\005\000\
\\018\000\004\000\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\095\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\094\000\007\000\011\000\008\000\010\000\009\000\009\000\
\\010\000\008\000\011\000\007\000\015\000\006\000\016\000\005\000\
\\018\000\004\000\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\100\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\101\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\102\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\001\000\103\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\095\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\006\000\104\000\007\000\011\000\008\000\010\000\009\000\009\000\
\\010\000\008\000\011\000\007\000\015\000\006\000\016\000\005\000\
\\018\000\004\000\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\109\000\000\000\
\\001\000\113\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\027\000\115\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\092\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\014\000\121\000\015\000\006\000\016\000\005\000\
\\018\000\004\000\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\123\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\127\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\001\000\128\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\017\000\129\000\000\000\
\\001\000\130\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\133\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\138\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\141\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\027\000\143\000\000\000\
\\000\000\
\\001\000\144\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\007\000\011\000\008\000\010\000\009\000\009\000\010\000\008\000\
\\011\000\007\000\015\000\006\000\016\000\005\000\018\000\004\000\
\\019\000\003\000\020\000\002\000\028\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 146
val numrules = 70
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit | STRING of unit ->  (string) | INT of unit ->  (int) | ID of unit ->  (string)
end
type svalue = MlyValue.svalue
type result = unit
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 31) => true | (T 32) => true | (T 33) => true | (T 39) => true | (T 35) => true | (T 36) => true | (T 37) => true | (T 41) => true | (T 42) => true | (T 43) => true | (T 27) => true | (T 28) => true | (T 29) => true | (T 30) => true | (T 34) => true | (T 38) => true | (T 40) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 29))::
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "TIMES"
  | (T 17) => "DIVIDE"
  | (T 18) => "EQ"
  | (T 19) => "NEQ"
  | (T 20) => "LT"
  | (T 21) => "LE"
  | (T 22) => "GT"
  | (T 23) => "GE"
  | (T 24) => "AND"
  | (T 25) => "OR"
  | (T 26) => "ASSIGN"
  | (T 27) => "ARRAY"
  | (T 28) => "IF"
  | (T 29) => "THEN"
  | (T 30) => "ELSE"
  | (T 31) => "WHILE"
  | (T 32) => "FOR"
  | (T 33) => "TO"
  | (T 34) => "DO"
  | (T 35) => "LET"
  | (T 36) => "IN"
  | (T 37) => "END"
  | (T 38) => "OF"
  | (T 39) => "BREAK"
  | (T 40) => "NIL"
  | (T 41) => "FUNCTION"
  | (T 42) => "VAR"
  | (T 43) => "TYPE"
  | (T 44) => "UMINUS"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.ntVOID exp1, exp1left, exp1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 in ((*#line 48.16 "tiger.grm"*)(*#line 672.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 1, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.ntVOID lvalue1, lvalue1left, lvalue1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  lvalue1 = lvalue1 ()
 in ((*#line 50.35 "tiger.grm"*)(*#line 678.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.ntVOID vallessexp1, vallessexp1left, vallessexp1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  vallessexp1 = vallessexp1 ()
 in ((*#line 51.35 "tiger.grm"*)(*#line 684.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, vallessexp1left, vallessexp1right), rest671)
end
|  ( 3, ( ( _, ( MlyValue.ntVOID seqs1, seqs1left, seqs1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  seqs1 = seqs1 ()
 in ((*#line 52.35 "tiger.grm"*)(*#line 690.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, seqs1left, seqs1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.ntVOID unitexp1, unitexp1left, unitexp1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  unitexp1 = unitexp1 ()
 in ((*#line 53.35 "tiger.grm"*)(*#line 696.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, unitexp1left, unitexp1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  INT1 = INT1 ()
 in ((*#line 54.35 "tiger.grm"*)(*#line 702.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, INT1left, INT1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.STRING STRING1, STRING1left, STRING1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  STRING1 = STRING1 ()
 in ((*#line 55.35 "tiger.grm"*)(*#line 708.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, STRING1left, STRING1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: ( _, ( _, MINUS1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 in ((*#line 56.35 "tiger.grm"*)(*#line 714.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, MINUS1left, exp1right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.ntVOID negation1, negation1left, negation1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  negation1 = negation1 ()
 in ((*#line 57.35 "tiger.grm"*)(*#line 720.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, negation1left, negation1right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.ntVOID funcall1, funcall1left, funcall1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  funcall1 = funcall1 ()
 in ((*#line 58.35 "tiger.grm"*)(*#line 726.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, funcall1left, funcall1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.ntVOID arthcomp1, arthcomp1left, arthcomp1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  arthcomp1 = arthcomp1 ()
 in ((*#line 59.35 "tiger.grm"*)(*#line 732.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, arthcomp1left, arthcomp1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.ntVOID logicops1, logicops1left, logicops1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  logicops1 = logicops1 ()
 in ((*#line 60.35 "tiger.grm"*)(*#line 738.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, logicops1left, logicops1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.ntVOID comrcomp1, comrcomp1left, comrcomp1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  comrcomp1 = comrcomp1 ()
 in ((*#line 61.35 "tiger.grm"*)(*#line 744.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, comrcomp1left, comrcomp1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.ntVOID recordcreate1, recordcreate1left, recordcreate1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  recordcreate1 = recordcreate1 ()
 in ((*#line 62.35 "tiger.grm"*)(*#line 750.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, recordcreate1left, recordcreate1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.ntVOID arraycreate1, arraycreate1left, arraycreate1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  arraycreate1 = arraycreate1 ()
 in ((*#line 63.35 "tiger.grm"*)(*#line 756.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, arraycreate1left, arraycreate1right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.ntVOID assign1, assign1left, assign1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  assign1 = assign1 ()
 in ((*#line 64.35 "tiger.grm"*)(*#line 762.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, assign1left, assign1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.ntVOID ifthen1, ifthen1left, ifthen1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ifthen1 = ifthen1 ()
 in ((*#line 65.35 "tiger.grm"*)(*#line 768.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, ifthen1left, ifthen1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: ( _, ( _, WHILE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 66.46 "tiger.grm"*)(*#line 774.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, WHILE1left, exp2right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.ntVOID exp3, _, exp3right)) :: _ :: ( _, ( MlyValue.ntVOID exp2, _, _)) :: _ :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, FOR1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in ((*#line 67.46 "tiger.grm"*)(*#line 781.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, FOR1left, exp3right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.ntVOID letexp1, letexp1left, letexp1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  letexp1 = letexp1 ()
 in ((*#line 68.35 "tiger.grm"*)(*#line 790.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, letexp1left, letexp1right), rest671)
end
|  ( 20, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 in ((*#line 69.35 "tiger.grm"*)(*#line 796.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 0, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 21, ( ( _, ( _, BREAK1left, BREAK1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 70.35 "tiger.grm"*)(*#line 802.1 "tiger.grm.sml"*)
))
 in ( LrTable.NT 0, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 22, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 71.35 "tiger.grm"*)(*#line 806.1 "tiger.grm.sml"*)
))
 in ( LrTable.NT 0, ( result, NIL1left, NIL1right), rest671)
end
|  ( 23, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ntVOID expseqs1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  expseqs1 = expseqs1 ()
 in ((*#line 74.34 "tiger.grm"*)(*#line 810.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 4, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.ntVOID exp1, exp1left, exp1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 in ((*#line 76.35 "tiger.grm"*)(*#line 816.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 5, ( result, exp1left, exp1right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.ntVOID expseqs1, _, expseqs1right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  expseqs1 = expseqs1 ()
 in ((*#line 77.35 "tiger.grm"*)(*#line 822.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 5, ( result, exp1left, expseqs1right), rest671)
end
|  ( 26, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 78.35 "tiger.grm"*)(*#line 829.1 "tiger.grm.sml"*)
))
 in ( LrTable.NT 5, ( result, defaultPos, defaultPos), rest671)
end
|  ( 27, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ntVOID args1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  args1 = args1 ()
 in ((*#line 80.34 "tiger.grm"*)(*#line 833.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 7, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.ntVOID exp1, exp1left, exp1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 in ((*#line 82.31 "tiger.grm"*)(*#line 840.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 13, ( result, exp1left, exp1right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.ntVOID args1, _, args1right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  args1 = args1 ()
 in ((*#line 83.31 "tiger.grm"*)(*#line 846.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 13, ( result, exp1left, args1right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 86.29 "tiger.grm"*)(*#line 853.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 8, ( result, exp1left, exp2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 87.29 "tiger.grm"*)(*#line 860.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 8, ( result, exp1left, exp2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 88.29 "tiger.grm"*)(*#line 867.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 8, ( result, exp1left, exp2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 89.29 "tiger.grm"*)(*#line 874.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 8, ( result, exp1left, exp2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 91.29 "tiger.grm"*)(*#line 881.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, exp1left, exp2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 92.29 "tiger.grm"*)(*#line 888.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 9, ( result, exp1left, exp2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 95.27 "tiger.grm"*)(*#line 895.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 96.27 "tiger.grm"*)(*#line 902.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 97.27 "tiger.grm"*)(*#line 909.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 98.27 "tiger.grm"*)(*#line 916.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 99.27 "tiger.grm"*)(*#line 923.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 100.27 "tiger.grm"*)(*#line 930.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 10, ( result, exp1left, exp2right), rest671)
end
|  ( 42, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID recassign1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  recassign1 = recassign1 ()
 in ((*#line 102.41 "tiger.grm"*)(*#line 937.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 14, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  exp1 = exp1 ()
 in ((*#line 104.41 "tiger.grm"*)(*#line 943.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 16, ( result, ID1left, exp1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.ntVOID recassign1, _, recassign1right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  exp1 = exp1 ()
 val  recassign1 = recassign1 ()
 in ((*#line 105.41 "tiger.grm"*)(*#line 950.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 16, ( result, ID1left, recassign1right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: _ :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 108.47 "tiger.grm"*)(*#line 958.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 15, ( result, ID1left, exp2right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.ntVOID lvalue1, lvalue1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  lvalue1 = lvalue1 ()
 val  exp1 = exp1 ()
 in ((*#line 111.33 "tiger.grm"*)(*#line 966.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 17, ( result, lvalue1left, exp1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.ntVOID exp3, _, exp3right)) :: _ :: ( _, ( MlyValue.ntVOID exp2, _, _)) :: _ :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: ( _, ( _, IF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in ((*#line 113.41 "tiger.grm"*)(*#line 973.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 18, ( result, IF1left, exp3right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: ( _, ( _, IF1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 114.41 "tiger.grm"*)(*#line 981.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 18, ( result, IF1left, exp2right), rest671)
end
|  ( 49, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.ntVOID expseqs1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID decs1, _, _)) :: ( _, ( _, LET1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  decs1 = decs1 ()
 val  expseqs1 = expseqs1 ()
 in ((*#line 117.41 "tiger.grm"*)(*#line 988.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 19, ( result, LET1left, END1right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.ntVOID decs1, _, decs1right)) :: ( _, ( MlyValue.ntVOID dec1, dec1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  dec1 = dec1 ()
 val  decs1 = decs1 ()
 in ((*#line 119.38 "tiger.grm"*)(*#line 995.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 20, ( result, dec1left, decs1right), rest671)
end
|  ( 51, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 120.38 "tiger.grm"*)(*#line 1002.1 "tiger.grm.sml"*)
))
 in ( LrTable.NT 20, ( result, defaultPos, defaultPos), rest671)
end
|  ( 52, ( ( _, ( MlyValue.ntVOID tydec1, tydec1left, tydec1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  tydec1 = tydec1 ()
 in ((*#line 122.22 "tiger.grm"*)(*#line 1006.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 21, ( result, tydec1left, tydec1right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.ntVOID vardec1, vardec1left, vardec1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  vardec1 = vardec1 ()
 in ((*#line 123.23 "tiger.grm"*)(*#line 1012.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 21, ( result, vardec1left, vardec1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.ntVOID fundec1, fundec1left, fundec1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  fundec1 = fundec1 ()
 in ((*#line 124.23 "tiger.grm"*)(*#line 1018.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 21, ( result, fundec1left, fundec1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.ntVOID ty1, _, ty1right)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, TYPE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  ty1 = ty1 ()
 in ((*#line 126.37 "tiger.grm"*)(*#line 1024.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 22, ( result, TYPE1left, ty1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 in ((*#line 128.13 "tiger.grm"*)(*#line 1031.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 25, ( result, ID1left, ID1right), rest671)
end
|  ( 57, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  tyfields1 = tyfields1 ()
 in ((*#line 129.38 "tiger.grm"*)(*#line 1037.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 25, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, ARRAY1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 in ((*#line 130.38 "tiger.grm"*)(*#line 1043.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 25, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 59, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 133.47 "tiger.grm"*)(*#line 1049.1 "tiger.grm.sml"*)
))
 in ( LrTable.NT 26, ( result, defaultPos, defaultPos), rest671)
end
|  ( 60, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in ((*#line 134.47 "tiger.grm"*)(*#line 1053.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 26, ( result, ID1left, ID2right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.ntVOID tyfields1, _, tyfields1right)) :: _ :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  tyfields1 = tyfields1 ()
 in ((*#line 135.47 "tiger.grm"*)(*#line 1060.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 26, ( result, ID1left, tyfields1right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, VAR1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  exp1 = exp1 ()
 in ((*#line 138.48 "tiger.grm"*)(*#line 1068.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 23, ( result, VAR1left, exp1right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, VAR1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  exp1 = exp1 ()
 in ((*#line 139.48 "tiger.grm"*)(*#line 1075.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 23, ( result, VAR1left, exp1right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: _ :: ( _, ( MlyValue.ntVOID tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, FUNCTION1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  tyfields1 = tyfields1 ()
 val  exp1 = exp1 ()
 in ((*#line 142.65 "tiger.grm"*)(*#line 1083.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 24, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.ID ID2, _, _)) :: _ :: _ :: ( _, ( MlyValue.ntVOID tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, FUNCTION1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  tyfields1 = tyfields1 ()
 val  ID2 = ID2 ()
 val  exp1 = exp1 ()
 in ((*#line 143.65 "tiger.grm"*)(*#line 1091.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 24, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 in ((*#line 146.27 "tiger.grm"*)(*#line 1100.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 2, ( result, ID1left, ID1right), rest671)
end
|  ( 67, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID lvalue1, lvalue1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  lvalue1 = lvalue1 ()
 val  exp1 = exp1 ()
 in ((*#line 147.36 "tiger.grm"*)(*#line 1106.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 2, ( result, lvalue1left, RBRACK1right), rest671)
end
|  ( 68, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( MlyValue.ntVOID lvalue1, lvalue1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  lvalue1 = lvalue1 ()
 val  ID1 = ID1 ()
 in ((*#line 148.27 "tiger.grm"*)(*#line 1113.1 "tiger.grm.sml"*)
)
end; ()))
 in ( LrTable.NT 2, ( result, lvalue1left, ID1right), rest671)
end
|  ( 69, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ((*#line 151.26 "tiger.grm"*)(*#line 1120.1 "tiger.grm.sml"*)
))
 in ( LrTable.NT 27, ( result, LPAREN1left, RPAREN1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.ntVOID x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(ParserData.MlyValue.VOID,p1,p2))
end
end
